searchNodes=[{"doc":"This Projects is a card simulator. It can generate a deck of cards with or without jokers and produce certain functionality to those cards such as shuffle the cards, find out if the deck contains a certain card, deal the cards, shuffle and draw the cards, and finally save the cards to file and open a file containing rows of cards.","ref":"Card.html","title":"Card","type":"module"},{"doc":"This function takes a deck of cards and any card you want to check as an argument and verifies that the deck contains the card you are checking. Function def contains? ( cards , card ) do Enum . member? ( cards , card ) end Examples iex&gt; deck = Card . create_cards iex&gt; Card . contains? ( deck , &quot;Queen of Hearts&quot; ) true","ref":"Card.html#contains?/2","title":"Card.contains?/2","type":"function"},{"doc":"This Function Generates an ordered deck of cards Function def create_cards do cards = [ &quot;Ace&quot; , &quot;Two&quot; , &quot;Three&quot; , &quot;Four&quot; , &quot;Five&quot; , &quot;Six&quot; , &quot;Seven&quot; , &quot;Eight&quot; , &quot;Nine&quot; , &quot;Ten&quot; , &quot;Jack&quot; , &quot;Queen&quot; , &quot;King&quot; ] suits = [ &quot;Hearts&quot; , &quot;Clubs&quot; , &quot;Spades&quot; , &quot;Diamonds&quot; ] for suit &lt;- suits , card &lt;- cards do &quot; \#{ card } of \#{ suit } &quot; end end","ref":"Card.html#create_cards/0","title":"Card.create_cards/0","type":"function"},{"doc":"This function generates an ordered list of cards with 2 jokers Function def create_cards_with_jokers do Card . create_cards ( ) ++ [ &quot;Joker&quot; , &quot;Joker&quot; ] end","ref":"Card.html#create_cards_with_jokers/0","title":"Card.create_cards_with_jokers/0","type":"function"},{"doc":"This function creates a tuple with a hand and the rest of the deck. Function def deal ( cards , amt ) do Enum . split ( cards , amt ) end Examples iex&gt; deck = Card . create_cards iex&gt; Card . deal ( deck , 5 ) { [ &quot;Ace of Hearts&quot; , &quot;Two of Hearts&quot; , &quot;Three of Hearts&quot; , &quot;Four of Hearts&quot; , &quot;Five of Hearts&quot; ] , [ &quot;Six of Hearts&quot; , &quot;Seven of Hearts&quot; , &quot;Eight of Hearts&quot; , &quot;Nine of Hearts&quot; , &quot;Ten of Hearts&quot; , &quot;Jack of Hearts&quot; , &quot;Queen of Hearts&quot; , &quot;King of Hearts&quot; , &quot;Ace of Clubs&quot; , &quot;Two of Clubs&quot; , &quot;Three of Clubs&quot; , &quot;Four of Clubs&quot; , &quot;Five of Clubs&quot; , &quot;Six of Clubs&quot; , &quot;Seven of Clubs&quot; , &quot;Eight of Clubs&quot; , &quot;Nine of Clubs&quot; , &quot;Ten of Clubs&quot; , &quot;Jack of Clubs&quot; , &quot;Queen of Clubs&quot; , &quot;King of Clubs&quot; , &quot;Ace of Spades&quot; , &quot;Two of Spades&quot; , &quot;Three of Spades&quot; , &quot;Four of Spades&quot; , &quot;Five of Spades&quot; , &quot;Six of Spades&quot; , &quot;Seven of Spades&quot; , &quot;Eight of Spades&quot; , &quot;Nine of Spades&quot; , &quot;Ten of Spades&quot; , &quot;Jack of Spades&quot; , &quot;Queen of Spades&quot; , &quot;King of Spades&quot; , &quot;Ace of Diamonds&quot; , &quot;Two of Diamonds&quot; , &quot;Three of Diamonds&quot; , &quot;Four of Diamonds&quot; , &quot;Five of Diamonds&quot; , &quot;Six of Diamonds&quot; , &quot;Seven of Diamonds&quot; , &quot;Eight of Diamonds&quot; , &quot;Nine of Diamonds&quot; , &quot;Ten of Diamonds&quot; , &quot;Jack of Diamonds&quot; , &quot;Queen of Diamonds&quot; , &quot;King of Diamonds&quot; ] }","ref":"Card.html#deal/2","title":"Card.deal/2","type":"function"},{"doc":"This function: Takes a boolean argument whether the user wants the deck with jokers or not Creates the deck Shuffles the deck Deals out 5 cards Function def draw ( withJokers ) do { cards , _rest } = case withJokers do true -&gt; Card . create_cards_with_jokers ( ) false -&gt; Card . create_cards ( ) end |&gt; Card . shuffle ( ) |&gt; Card . deal ( 5 ) cards end","ref":"Card.html#draw/1","title":"Card.draw/1","type":"function"},{"doc":"This function takes a file name as an argument and opens the file and returns the deck of cards if formatted correctly, otherwise returns an error message if the file does not exist. Function def open ( filename ) do case File . read ( filename ) do { :ok , binary } -&gt; :erlang . binary_to_term ( binary ) { :error , _report } -&gt; &quot;There is no file that exists with \#{ filename } &quot; end end","ref":"Card.html#open/1","title":"Card.open/1","type":"function"},{"doc":"This function saves takes a deck of cards and file name as arguments and saves the cards to a file in the root of your project. Function def save ( cards , filename ) do binary = :erlang . term_to_binary ( cards ) File . write ( filename , binary ) end","ref":"Card.html#save/2","title":"Card.save/2","type":"function"},{"doc":"This functions takes a deck as an argument and returns a shuffle list of cards Function def shuffle ( cards ) do Enum . shuffle ( cards ) end","ref":"Card.html#shuffle/1","title":"Card.shuffle/1","type":"function"}]